export const languages : any = [["Go","https://cdn.worldvectorlogo.com/logos/go-logo-1.svg"],["Java","https://logoeps.com/wp-content/uploads/2011/06/java-logo-vector.png"]];
export const frameworks : any = {"Go":["Chi","Gin","Echo","WebGo","Gorilla/MUX","MongoDB","DynamoDB","SQL Driver","net/http","gRPC"]
                             ,"Java":["Spring Boot"]}

export const details : any = {"Go":{"Chi":'\n\nr := chi.NewRouter()\nkchi.ChiV5(k,r)\n\n// Example \n\nimport("github.com/keploy/go-sdk/integrations/kchi")\n\nr := chi.NewRouter()\nport := "8080"\nk := keploy.New(keploy.Config{\n           App: keploy.AppConfig{\n               Name: "my_app",\n\               Port: port,\n           },\n           Server: keploy.ServerConfig{\n               URL: "http://localhost:8081/api",\n           },\n         })\n\nkchi.ChiV5(k,r)\nhttp.ListenAndServe(":" + port, r)',
                        "Gin":'\n\nr:=gin.New()\nkgin.GinV1(k, r)\n\n// Example \n\nimport("github.com/keploy/go-sdk/integrations/kgin/v1")\n\nr:=gin.New()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my_app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkgin.GinV1(k, r)\nr.Run(":" + port)',
                        "Echo":'\n\ne := echo.New()\nkecho.EchoV4(k, e)\n\n// Example\n\nimport("github.com/keploy/go-sdk/integrations/kecho/v4")\n\ne := echo.New()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkecho.EchoV4(k, e)\ne.Start(":" + port)',
                        "WebGo":'// WebGoV4\n\nrouter := webgo.NewRouter(cfg, getRoutes())\nkwebgo.WebGoV4(k, router)\n\n// WebGoV6\n\nkwebgo.WebGoV6(k, router)\nrouter.Start()\n\n// Example\n\nimport("github.com/keploy/go-sdk/integrations/kwebgo/v4")\n\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\n\nkwebgo.WebGoV4(k,router)\nrouter.Start()',
                        "Gorilla/MUX":'\n\nr := mux.NewRouter()\nkmux.Mux(k, r)\n\n// Example \n\nimport(\n    "github.com/keploy/go-sdk/integrations/kmux"\n    "net/http"\n)\n\nr := mux.NewRouter()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkmux.Mux(k, r)\nhttp.ListenAndServe(":"+port, r)',
                        "MongoDB":'\n\nimport("github.com/keploy/go-sdk/integrations/kmongo")\n\ndb  := client.Database("testDB")\ncol := kmongo.NewCollection(db.Collection("Demo-Collection"))\n\n// Following operations are supported:\n\n// FindOne - Err and Decode method of mongo.SingleResult\n// Find - Next, TryNext, Err, Close, All and Decode methods of mongo.cursor\n// InsertOne\n// InsertMany\n// UpdateOne\n// UpdateMany\n// DeleteOne\n// DeleteMany\n// CountDocuments\n// Distinct\n// Aggregate - Next, TryNext, Err, Close, All and Decode methods of mongo.cursor',
                        "DynamoDB":'\n\nimport("github.com/keploy/go-sdk/integrations/kddb")\n\nclient := kddb.NewDynamoDB(dynamodb.New(sess))\n\n\n// Following operations are supported:\n\n// QueryWithContext\n// GetItemWithContext\n// PutItemWithContext'
                        ,"SQL Driver":'\n\nimport(\n    "github.com/keploy/go-sdk/integrations/ksql"\n    "github.com/lib/pq"\n)\n\nfunc init(){\n    driver := ksql.Driver{Driver: pq.Driver{}}\n    sql.Register("keploy", &driver)\n}\n\n',
                        "net/http":'\n\nkhttpclient.NewHttpClient(&http.Client{})\n\n// Example \n\nimport("github.com/keploy/go-sdk/integrations/khttpclient")\n\nfunc(w http.ResponseWriter, r *http.Request){\n    client := khttpclient.NewHttpClient(&http.Client{})\n// ensure to add request context to all outgoing http requests\n    client.SetCtxHttpClient(r.Context())\n    resp, err := client.Get("https://example.com")\n}\n\n// Note: ensure to add pass request context to all external \nrequests like http requests, db calls, etc.',
                        "gRPC":'\n\nconn, err := grpc.Dial(address, grpc.WithInsecure(), kgrpc.WithClientUnaryInterceptor(k))\n\n// Example \n\nimport("github.com/keploy/go-sdk/integrations/kgrpc")\n\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\n\nconn, err := grpc.Dial(address, grpc.WithInsecure(), kgrpc.WithClientUnaryInterceptor(k))\n\n// Note: Currently streaming is not yet supported.'},
                        "Java":{"Spring Boot":'package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication(scanBasePackages = {"com.example.demo", "io.keploy.servlet"})\npublic class SamplesJavaApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(SamplesJavaApplication.class, args);\n    }\n}'}}

export const images : any = {"Go":"https://cdn.worldvectorlogo.com/logos/go-logo-1.svg",
                            "Java":"https://logoeps.com/wp-content/uploads/2011/06/java-logo-vector.png"
}

export const issueLink : any = {"Go":"https://github.com/keploy/go-sdk/issues/new?assignees=&labels=&template=feature_request.md&title=",
                            "Java":"https://github.com/keploy/java-sdk/issues/new?assignees=&labels=feature&template=--feature-request.yaml&title=%5Bfeature%5D%3A+"
}